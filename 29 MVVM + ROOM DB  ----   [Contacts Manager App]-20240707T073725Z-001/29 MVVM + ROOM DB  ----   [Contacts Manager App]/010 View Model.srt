1
00:00:00,140 --> 00:00:03,440
We created the room database and the repository.

2
00:00:03,440 --> 00:00:06,110
In this video, we'll create the view model.

3
00:00:06,110 --> 00:00:13,460
The purpose of the view model is to acquire and keep the information that is necessary for an activity

4
00:00:13,460 --> 00:00:14,360
or a fragment.

5
00:00:14,360 --> 00:00:18,050
It acts as a link between the model and the view.

6
00:00:18,050 --> 00:00:21,920
It's responsible for transforming the data from the model.

7
00:00:21,920 --> 00:00:24,500
It provides data streams to the view.

8
00:00:24,500 --> 00:00:29,450
The activity or the fragment should be able to observe changes in the view model.

9
00:00:29,450 --> 00:00:36,980
View models usually expose this information via live data or Android data binding.

10
00:00:36,980 --> 00:00:40,310
Let's jump into Android studio and create our view model.

11
00:00:40,310 --> 00:00:46,280
Create a new Java class and I'll name it as my view model.

12
00:00:46,280 --> 00:00:51,830
And typically we need to extend the view model from Android lifecycle.

13
00:00:51,830 --> 00:00:58,130
But if we open the repository, I need to initialize this repository and to initialize it I need to

14
00:00:58,130 --> 00:01:03,090
call its constructor and pass an application as a parameter.

15
00:01:03,090 --> 00:01:11,070
If you need to use the context inside your view model, you should use Android View model AVM instead

16
00:01:11,070 --> 00:01:15,750
of a view model because it contains the application context.

17
00:01:15,750 --> 00:01:17,820
I'll show you the problem here.

18
00:01:17,820 --> 00:01:25,620
I need to initialize and create an instance from the repository, my repository and in the constructor

19
00:01:25,620 --> 00:01:33,390
of this view model I need to initialize it this repository equal to new repository.

20
00:01:33,390 --> 00:01:37,920
And here I need to pass a parameter of type application.

21
00:01:37,920 --> 00:01:45,840
Here's the problem where I can get the application, get application context, the view dot, get application

22
00:01:45,840 --> 00:01:46,470
context.

23
00:01:46,500 --> 00:01:50,310
Nothing I can use to get the application instance.

24
00:01:50,310 --> 00:01:56,760
So the solution is to change from view model to Android view model.

25
00:01:56,760 --> 00:02:04,050
Android View Model class is a subclass of a view model and similar to them they are designed to store

26
00:02:04,050 --> 00:02:10,830
and manage UI related data that are responsible to prepare and provide data for the UI and automatically

27
00:02:10,830 --> 00:02:17,010
allow data to survive configuration changes so I can use a new constructor.

28
00:02:17,080 --> 00:02:23,340
Alt+ Insert constructor my repository and you can see my application is passed.

29
00:02:23,370 --> 00:02:28,050
Okay, so this constructor will get application and a repository.

30
00:02:28,050 --> 00:02:36,960
I'll remove this repository because I need to initialize it here equal to new repository and pass the

31
00:02:36,960 --> 00:02:39,090
application as a parameter.

32
00:02:39,090 --> 00:02:42,900
So this is how we use the Android view model.

33
00:02:42,900 --> 00:02:49,290
Again, Android view model is a subclass of view model that are designed to store and manage UI related

34
00:02:49,290 --> 00:02:49,830
data.

35
00:02:49,860 --> 00:02:53,460
Then I need to create the live data.

36
00:03:00,390 --> 00:03:08,340
And this live data instance, all contacts will call the repository dot, get all contacts method this

37
00:03:08,340 --> 00:03:14,340
method, get all contacts and return the data and store it inside the live data.

38
00:03:14,340 --> 00:03:25,080
So public live data of type list of contacts data type Get all contacts then all contacts.

39
00:03:25,110 --> 00:03:30,100
Live data equal to repository dot get all contacts.

40
00:03:30,120 --> 00:03:38,610
You can see I'm using the repository to get all contacts and execute this method, return all contacts.

41
00:03:38,610 --> 00:03:43,350
Also I have inside this repository to other methods.

42
00:03:43,350 --> 00:03:45,690
Add contact and delete contact.

43
00:03:45,690 --> 00:03:54,420
So I'll use ViewModel to create these methods and call the methods of the repository public void.

44
00:03:54,420 --> 00:03:59,640
Add new contact and I need to pass a contact object.

45
00:03:59,640 --> 00:04:06,130
You can see I'm using my repository instance to call and execute the functions.

46
00:04:06,160 --> 00:04:10,780
Add contact public void delete contact.

47
00:04:10,780 --> 00:04:18,220
I need to pass contacts object and use it in order to execute the repository, delete contact method

48
00:04:18,220 --> 00:04:19,540
and pass the contact.

49
00:04:19,540 --> 00:04:23,530
So this class will provide the data to the UI.

50
00:04:23,560 --> 00:04:30,130
Live data is used to observe changes in the user data and automatically update the UI when data changes

51
00:04:30,130 --> 00:04:36,220
and contacts can be inserted into room database through the ViewModel and also be deleted.

52
00:04:36,220 --> 00:04:44,620
This Mvvm architecture separates concerns, makes the code more maintainable and ensures a responsive

53
00:04:44,620 --> 00:04:46,030
and up to date UI.

54
00:04:46,060 --> 00:04:52,600
The ViewModel acts as a bridge between the UI and the data source, which is the room database in our

55
00:04:52,600 --> 00:04:57,430
application, making it easier to manage data and UI interactions.

