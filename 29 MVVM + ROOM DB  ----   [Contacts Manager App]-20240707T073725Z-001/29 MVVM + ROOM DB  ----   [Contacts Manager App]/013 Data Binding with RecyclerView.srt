1
00:00:00,050 --> 00:00:08,210
Since I'm going to use this layout, the contact list item, that XML file to display the items of the

2
00:00:08,210 --> 00:00:10,370
database into a recycler view.

3
00:00:10,370 --> 00:00:19,790
With this customized layout, I need to use a custom adapter that extends from recycler view and contains

4
00:00:19,820 --> 00:00:20,900
a view holder.

5
00:00:20,900 --> 00:00:23,660
So for that I'll create a new Java class.

6
00:00:23,660 --> 00:00:26,330
I'll name it as my adapter.

7
00:00:26,330 --> 00:00:32,330
And this my adapter class will act as a custom adapter for our recycler view.

8
00:00:32,330 --> 00:00:42,950
I'll extend recycler view dot adapter and you can see I need to pass the H viewholder class and the

9
00:00:42,950 --> 00:00:50,360
main purpose of a view holder is to hold references to views that are part of the individual items layout

10
00:00:50,360 --> 00:00:52,180
within a recycler view.

11
00:00:52,190 --> 00:00:57,720
These views can be complex, containing multiple widgets like text, view, image, view and more.

12
00:00:57,740 --> 00:01:02,010
In our case, we have only two text views we need to display.

13
00:01:02,040 --> 00:01:09,930
A recycler view can potentially display a large number of items and creating a new view for each item

14
00:01:09,930 --> 00:01:14,640
can be resource intensive and slow The Viewholder pattern.

15
00:01:14,670 --> 00:01:21,270
The addresses this issue by recycling and reusing views for different items.

16
00:01:21,270 --> 00:01:27,600
As they scroll on and off the screen, please refer to the recycler view section.

17
00:01:27,600 --> 00:01:34,920
If you have any doubt here, I need to pass the view holder and always when you create a custom adapter,

18
00:01:34,920 --> 00:01:38,310
start by creating the view Holder class.

19
00:01:38,310 --> 00:01:46,020
I'll start by class View Holder extends from recycler view dot view holder.

20
00:01:46,020 --> 00:01:50,400
I need to extend from the recycler view dot Viewholder.

21
00:01:50,400 --> 00:01:57,690
I need to hold the references here so private text, view, name and email.

22
00:01:57,690 --> 00:02:05,430
But wait, why we're going to make like this and we're going to use and we use the data binding in our

23
00:02:05,430 --> 00:02:06,030
layout.

24
00:02:06,030 --> 00:02:14,490
So in this video I want from you to focus with me because this is a very new and very important concept

25
00:02:14,490 --> 00:02:17,430
in Android data binding library.

26
00:02:17,430 --> 00:02:21,960
I'm going to use the data binding with recycler view.

27
00:02:21,960 --> 00:02:24,360
I don't need to write like this.

28
00:02:24,360 --> 00:02:29,400
I'm going to create a reference for my item binding.

29
00:02:29,430 --> 00:02:37,590
As I told you in the data binding library lessons, I'll start to to make the reference for this layout.

30
00:02:37,590 --> 00:02:45,060
I need to start with the name of the layout with capital letter and the camel case and I'll add the

31
00:02:45,060 --> 00:02:48,180
postfix or the keyword binding.

32
00:02:48,180 --> 00:02:55,770
So contact list item contact list item and I'll use the binding keyword.

33
00:02:55,770 --> 00:02:58,620
This is the first step and we know it.

34
00:02:58,620 --> 00:02:59,400
Okay.

35
00:02:59,430 --> 00:03:05,520
Alt+ enter to import this class, then I'll name it as contact list item bind.

36
00:03:05,550 --> 00:03:10,560
I need to create a constructor and I don't need this view.

37
00:03:10,560 --> 00:03:20,010
I need to pass it as contact list item binding dot get route and this method get route is a method used

38
00:03:20,010 --> 00:03:25,620
to obtain the route view of the layout associated with a data binding instance.

39
00:03:25,620 --> 00:03:32,460
It returns the route view of the layout associated with that binding object and in other words, it

40
00:03:32,460 --> 00:03:37,380
provides access to the top level view in your layout XML file.

41
00:03:37,380 --> 00:03:44,640
So it's a convenient way to access and interact with the route view of data bound layout in Android

42
00:03:44,640 --> 00:03:49,860
allowing you to perform operations on the UI defined in your layout files.

43
00:03:49,860 --> 00:03:56,400
Then back to up here I'll start adding the methods and the variables here.

44
00:03:56,400 --> 00:04:04,160
So private array list of contacts object and name it as contacts, array list or contacts.

45
00:04:04,200 --> 00:04:06,050
Alt+ enter import the class.

46
00:04:06,050 --> 00:04:16,279
The second step is to pass this Viewholder here so I refer to my adapter dot contact Viewholder class

47
00:04:16,279 --> 00:04:23,360
and I need to implement the methods Alt+ enter implement the methods we have to implement on create

48
00:04:23,360 --> 00:04:26,330
Viewholder on bind Viewholder and get item count.

49
00:04:26,330 --> 00:04:32,930
If you have any doubt about these methods, please refer to the Recyclerview section in our course.

50
00:04:32,930 --> 00:04:36,860
But don't worry, I'll make an overview for each method.

51
00:04:36,860 --> 00:04:45,440
I need to create an array list of type contacts and I need to create a constructor having this array

52
00:04:45,440 --> 00:04:45,890
list.

53
00:04:45,890 --> 00:04:48,920
Then I'll move to these methods.

54
00:04:48,920 --> 00:04:56,180
I'll start with the Oncreate Viewholder on create Viewholder method is called by the recycler view when

55
00:04:56,180 --> 00:04:59,600
it needs to create a new Viewholder to represent an.

56
00:04:59,720 --> 00:05:01,670
Item in the list or the grid.

57
00:05:01,670 --> 00:05:08,000
It's typically called when there is no recycled view holders available for reuse.

58
00:05:08,030 --> 00:05:15,830
Example During the initial creation of items or when scrolling brings new items into view, this method

59
00:05:15,860 --> 00:05:22,070
takes two parameters one of type view group and one of type integer.

60
00:05:22,100 --> 00:05:29,210
This parent is a viewgroup representing the parent view that the view holders layout will be attached

61
00:05:29,210 --> 00:05:36,280
to and the view type is of type an integer that represents the type of a view to be created.

62
00:05:36,290 --> 00:05:42,620
This is useful when you have multiple view types in recycler view and you need to distinguish between

63
00:05:42,620 --> 00:05:46,160
them and inside the Oncreate view holder method.

64
00:05:46,160 --> 00:05:54,080
You need to inflate the layout for the items views and create a new instance of your custom view holder

65
00:05:54,080 --> 00:05:54,620
class.

66
00:05:54,620 --> 00:06:02,540
For that, I'll use a layout inflator, so I'll start with the content list item binding.

67
00:06:02,540 --> 00:06:09,980
I'll create a new instance from it equal to data binding util dot inflate.

68
00:06:09,980 --> 00:06:16,850
I want from you to focus with me because we didn't use the data binding class with the recycler view

69
00:06:16,850 --> 00:06:18,530
in the data binding lesson.

70
00:06:18,530 --> 00:06:25,940
So in this example, in this layout and in this app, I'm going to use the data binding with a recycler

71
00:06:25,940 --> 00:06:26,240
view.

72
00:06:26,270 --> 00:06:27,260
Please pay attention.

