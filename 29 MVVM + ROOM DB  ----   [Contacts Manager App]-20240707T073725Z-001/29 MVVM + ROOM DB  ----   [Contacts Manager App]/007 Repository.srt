1
00:00:00,050 --> 00:00:01,990
Hello, my friends, and welcome back.

2
00:00:02,000 --> 00:00:04,610
In this video, we'll learn about repository.

3
00:00:04,610 --> 00:00:07,430
We succeeded in creating our room database.

4
00:00:07,430 --> 00:00:10,580
The next step is to create the repository.

5
00:00:10,610 --> 00:00:19,010
A repository in Mvvm architecture is an intermediary layer between the ViewModel and the data sources,

6
00:00:19,010 --> 00:00:22,160
such as a database or network service.

7
00:00:22,190 --> 00:00:31,010
It abstracts the details of data retrieval and provides a clean API for the ViewModel to interact with.

8
00:00:31,010 --> 00:00:35,660
It's mainly used to manage multiple resources of data.

9
00:00:35,660 --> 00:00:44,060
The repository can gather data from different data sources, different rest APIs, cache local database

10
00:00:44,060 --> 00:00:48,650
storage and it provides this data to the rest of the app.

11
00:00:48,650 --> 00:00:55,070
This is the function of the repository and the main purpose of creating the repository to gather data

12
00:00:55,070 --> 00:01:03,000
from different data sources, rest APIs, cache local database storage and providing this data to the

13
00:01:03,000 --> 00:01:04,290
rest of the app.

14
00:01:04,290 --> 00:01:11,760
When you have only one source of your data, such as our application, the room database, you don't

15
00:01:11,760 --> 00:01:20,700
need to create repository, but for demonstrating the usage and the main role of repository, I'll use

16
00:01:20,700 --> 00:01:21,870
it in our application.

17
00:01:21,870 --> 00:01:29,160
I'll create a new Java class and I'll name it as my repository or repository.

18
00:01:29,190 --> 00:01:37,110
We search for the available data sources and in our application we have only the room database, the

19
00:01:37,110 --> 00:01:39,030
offline database.

20
00:01:39,030 --> 00:01:49,140
So for that I'll create private final contact Dao and I'll use and I name it as contact Dao object.

21
00:01:49,140 --> 00:01:54,720
So when dealing with room databases, you need to deal with the contact dao in the repository.

22
00:01:54,720 --> 00:01:57,180
Alt+ enter to create the constructor.

23
00:01:57,180 --> 00:02:02,040
Having this contact dao as a parameter and initializing.

24
00:02:02,040 --> 00:02:04,650
Okay, so this is our repository.

25
00:02:04,650 --> 00:02:05,190
Now.

26
00:02:05,190 --> 00:02:10,979
This repository encapsulates data access and retrieval logic.

27
00:02:11,009 --> 00:02:19,320
It receives a contact Dao object in its constructor, which provides access to the local database,

28
00:02:19,320 --> 00:02:21,240
assuming you are using room.

29
00:02:21,240 --> 00:02:28,800
And this is what we've done and every method created in the Dao, you should mention it here in the

30
00:02:28,800 --> 00:02:29,640
repository.

31
00:02:29,640 --> 00:02:38,010
So I have three methods insert, delete and get all contacts I need to to use these methods from the

32
00:02:38,010 --> 00:02:38,910
repository.

33
00:02:38,910 --> 00:02:39,690
For that.

34
00:02:39,690 --> 00:02:41,640
I'll start with the first method.

35
00:02:41,640 --> 00:02:43,140
Add contact.

36
00:02:43,140 --> 00:02:52,410
It receives a contact object and I need to call this method insert in the Dao.

37
00:02:52,410 --> 00:02:58,290
So I'll use this contact dao object dot insert.

38
00:02:58,290 --> 00:03:04,530
And here I need to pass this parameter as a parameter inside this insert method.

39
00:03:04,530 --> 00:03:10,080
It's just managing all the methods in the different data sources.

40
00:03:10,080 --> 00:03:15,810
Again, if you have only one data source, you don't need to use the repository.

41
00:03:15,840 --> 00:03:27,150
Publicvoid delete contact receives a contact object and execute the contact Dao dot delete method and

42
00:03:27,150 --> 00:03:31,410
passing the contact as the argument for this delete method.

43
00:03:31,440 --> 00:03:38,670
The last step is the get all contacts and it's returning type is a list of contacts.

44
00:03:38,670 --> 00:03:45,900
So for that I need to create here public list of contacts object.

45
00:03:45,900 --> 00:03:56,070
Get all contacts and I need to call the contact Dao dot get all contacts Alt+ enter to import the class

46
00:03:56,070 --> 00:04:00,270
of the list and here I need to use the return statement.

47
00:04:00,270 --> 00:04:07,260
So these are three methods are listed in the repository that are similar to the Dao.

48
00:04:07,290 --> 00:04:14,340
If you have any source of data, you need to mention all the methods here in the repository.

