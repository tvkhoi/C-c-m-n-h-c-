1
00:00:00,140 --> 00:00:01,070
Welcome back.

2
00:00:01,070 --> 00:00:05,150
Let's continue with the view layer of the Mvvm architecture.

3
00:00:05,150 --> 00:00:12,440
And in this video, we're going to display all the data, all the contacts received from the room database

4
00:00:12,440 --> 00:00:14,900
into the main activity recycler view.

5
00:00:14,900 --> 00:00:20,930
For that, I need to define data, sources, adapters and binding objects.

6
00:00:20,930 --> 00:00:22,640
Starting by data source.

7
00:00:22,640 --> 00:00:31,640
I need to make a contact database object named as contact database and I'll create an array list of

8
00:00:31,640 --> 00:00:33,350
contacts objects.

9
00:00:33,350 --> 00:00:42,680
Here I need to create an object of adapter class private my adapter and here I need to create objects

10
00:00:42,680 --> 00:00:43,850
for data binding.

11
00:00:43,850 --> 00:00:52,160
I have two variables one for the activity main binding, main binding and one for the click handler

12
00:00:52,160 --> 00:00:55,730
which we created before main activity Click handlers.

13
00:00:55,730 --> 00:01:02,460
And this is the class that we created before that handles the click events on the Fab Floating Action

14
00:01:02,460 --> 00:01:02,790
button.

15
00:01:02,790 --> 00:01:06,090
Let's initialize them here in the Oncreate method.

16
00:01:06,090 --> 00:01:16,050
Main binding equal to data binding util dot Setcontentview this and passing our dot layout dot activity

17
00:01:16,080 --> 00:01:23,850
main data binding util dot Setcontentview is a method provided by Android's data binding library that

18
00:01:23,850 --> 00:01:30,300
allows you to set the content view of an activity or a fragment with data binding enabled.

19
00:01:30,300 --> 00:01:38,280
It simplifies the process of using data binding to bind UI elements to data sources in your layout XML

20
00:01:38,280 --> 00:01:38,820
files.

21
00:01:38,820 --> 00:01:46,260
Then I need to initialize the handlers equal to new main activity handlers and I'll pass this as a context.

22
00:01:46,260 --> 00:01:53,160
Then I need to link the main activity binding dot set click handler to the handlers.

23
00:01:53,160 --> 00:01:59,850
So here I am linking this main activity click handlers to the main activity binding.

24
00:01:59,850 --> 00:02:05,700
Let's move to initialize our recycler view and define the layout manager for it.

25
00:02:05,700 --> 00:02:14,790
Recycler View Recycler View equal to activity Main binding dot recycler View Recycler View Dot Set Layout

26
00:02:14,790 --> 00:02:15,600
Manager.

27
00:02:15,600 --> 00:02:23,070
New linear layout manager passing this and recycler view dot set has fixed size to true.

28
00:02:23,070 --> 00:02:32,340
In this line, I am obtaining a reference to a recycler view widget from a layout that uses data binding

29
00:02:32,340 --> 00:02:33,090
in Android.

30
00:02:33,090 --> 00:02:40,050
This is called main binding, so this is an object that uses and refers to this activity.

31
00:02:40,050 --> 00:02:41,250
Underscore main.

32
00:02:41,250 --> 00:02:47,370
And I'm going to use a reference for the recycler view called recycler view here.

33
00:02:47,370 --> 00:02:55,800
So this line is used to obtain a reference to a recycler view widget from a layout that uses data binding

34
00:02:55,800 --> 00:02:56,820
in Android.

35
00:02:56,820 --> 00:03:03,180
This reference allows you to interact with and manipulate the recycler view programmatically in your

36
00:03:03,180 --> 00:03:06,840
Android application code using the data binding library.

37
00:03:06,840 --> 00:03:15,270
Then let's move to create the adapter equal to new my adapter and I'll pass contacts as an array list.

38
00:03:15,270 --> 00:03:23,850
Let's move to the database contact database equal to contact database dot get instance and I need to

39
00:03:23,850 --> 00:03:26,010
pass the context get instance.

40
00:03:26,010 --> 00:03:35,160
As I told you before in the contact database, it will return one instance of the contact database because

41
00:03:35,160 --> 00:03:37,380
we followed the singleton pattern.

42
00:03:37,380 --> 00:03:40,200
Then I need to use the view model.

43
00:03:40,200 --> 00:03:42,930
So I'll create my ViewModel instance.

44
00:03:42,930 --> 00:03:52,200
ViewModel New ViewModel provider this dot get my view model dot class.

45
00:03:52,200 --> 00:04:01,290
So this line of code is used to get and create and retrieve an instance of a ViewModel associated with

46
00:04:01,290 --> 00:04:03,510
a specific activity or fragment.

47
00:04:03,510 --> 00:04:04,830
Let's break it down.

48
00:04:04,830 --> 00:04:10,560
ViewModel Provider is a class provided by Android's ViewModel architecture component.

49
00:04:10,560 --> 00:04:16,529
It's used to create and manage view models within the scope of an activity or fragment.

50
00:04:16,529 --> 00:04:23,790
This keyword typically refers to the current activity or fragment instance in the context of your code.

51
00:04:23,790 --> 00:04:27,330
This is passed as an argument to the view model provider.

52
00:04:27,330 --> 00:04:34,980
It signifies that you want to create or retrieve a ViewModel associated with the current activity or

53
00:04:34,980 --> 00:04:35,520
fragment.

54
00:04:35,520 --> 00:04:41,580
The get method of ViewModel Provider is called with a class of the ViewModel you want.

55
00:04:41,610 --> 00:04:48,630
This method is responsible for creating a new instance of the ViewModel if it doesn't already exist

56
00:04:48,630 --> 00:04:51,360
or returning an existing instance.

57
00:04:51,360 --> 00:04:56,010
If it does, then I'll insert a new contact just for testing.

58
00:04:56,010 --> 00:04:59,630
Later on we'll create a new activity that it's.

59
00:04:59,680 --> 00:05:04,470
Responsible for creating and inserting new contacts into the database.

60
00:05:04,480 --> 00:05:06,520
I'll start with the contacts.

61
00:05:06,550 --> 00:05:07,960
New contact.

62
00:05:07,960 --> 00:05:09,620
The ID would be one.

63
00:05:09,640 --> 00:05:12,700
This not important because the database.

64
00:05:12,700 --> 00:05:15,850
The database will auto generate the primary key.

65
00:05:15,880 --> 00:05:22,300
Then the name would be Jack and the email is Jack at gmail.com.

66
00:05:22,300 --> 00:05:30,420
I need to insert it into our database, so I'll use view model dot add new contact.

67
00:05:30,430 --> 00:05:33,700
You can see I am dealing with the view model.

68
00:05:33,700 --> 00:05:40,570
I don't deal directly with the database, I deal with the view model and the view model will deal with

69
00:05:40,570 --> 00:05:45,070
the repository and the repository will deal with the room database.

70
00:05:45,070 --> 00:05:48,670
This is how the Mvvm architecture works.

71
00:05:48,670 --> 00:05:56,740
Then I need to use the recycler view dot set adapter linking the adapter with the recycler view adapter

72
00:05:56,740 --> 00:06:03,080
and before linking the recycler view, I need to load the data from the database.

73
00:06:03,080 --> 00:06:05,240
What I need to do is.

74
00:06:05,270 --> 00:06:07,100
View model dot.

75
00:06:07,100 --> 00:06:09,290
Get all contacts.

76
00:06:09,290 --> 00:06:16,760
Then I need to use the observe method and the observe method is used to observe or listen for changes

77
00:06:16,760 --> 00:06:20,840
in the underlying data held by the live data object.

78
00:06:20,840 --> 00:06:28,730
You use the observe method on a live data object and pass in an observer you created.

79
00:06:28,730 --> 00:06:34,520
The Observe method establishes a connection between the live data and the observer.

80
00:06:34,520 --> 00:06:39,830
It tells the live data to notify the observer when the data changed.

81
00:06:39,830 --> 00:06:45,260
I need to pass two parameters one for the owner and one for the observer.

82
00:06:45,260 --> 00:06:51,770
So I am linking here the Observer with the observe, and I'm going to override the on changed method,

83
00:06:51,770 --> 00:06:58,040
and the observer object defines the behavior to execute when the user live data changes.

84
00:06:58,040 --> 00:07:02,870
In this case, it's reacting to changes in the context data.

85
00:07:02,900 --> 00:07:07,970
I'll use a for loop for each loop it's of type context.

86
00:07:08,000 --> 00:07:11,930
See inside the contacts array list.

87
00:07:11,930 --> 00:07:16,910
At first I'll get them into the logcat and then display them into the recycler view.

88
00:07:16,910 --> 00:07:22,850
So for that I'll make log dot v tag and c dot get name.

89
00:07:22,880 --> 00:07:27,500
I'll display all the names of the contacts in my database.

90
00:07:27,500 --> 00:07:31,580
Let's run this application and test our code.

