1
00:00:00,110 --> 00:00:00,920
Welcome back.

2
00:00:00,920 --> 00:00:04,270
We've done with the remote data source and the repository.

3
00:00:04,280 --> 00:00:06,460
So we finished the model layer.

4
00:00:06,470 --> 00:00:08,570
Now let's move to the view model layer.

5
00:00:08,600 --> 00:00:15,260
The view model is a crucial component responsible for managing and providing data to the UI, the view

6
00:00:15,290 --> 00:00:17,930
while maintaining the separation of concerns.

7
00:00:17,930 --> 00:00:24,770
It's part of Android architecture components and serves as a bridge between the data source, the model

8
00:00:24,770 --> 00:00:26,360
and the UI components.

9
00:00:26,360 --> 00:00:26,960
The view.

10
00:00:26,960 --> 00:00:34,220
The primary purpose of a view model is to store and manage UI related data, ensuring that this data

11
00:00:34,220 --> 00:00:41,900
persists across configuration changes like, for example, device rotation and that the UI remains responsive.

12
00:00:41,900 --> 00:00:46,580
Let's move to Android Studio and learn how to add and create the view models.

13
00:00:46,580 --> 00:00:54,280
I'll create a new package, I'll name it as View Model and make sure that you name your packages with

14
00:00:54,290 --> 00:00:55,520
small letters.

15
00:00:55,520 --> 00:01:03,230
Then inside this package I'll create a new Java class and I'll name it as Quiz View Model.

16
00:01:03,230 --> 00:01:06,440
Again, guys, I want from you to focus with me.

17
00:01:06,440 --> 00:01:09,650
There are a lot of concepts, a lot of details.

18
00:01:09,650 --> 00:01:15,170
Please go back to the View model section in order to learn more about View models.

19
00:01:15,170 --> 00:01:17,000
But don't worry, I'll explain.

20
00:01:17,000 --> 00:01:20,870
Everything I write extends the view model.

21
00:01:20,870 --> 00:01:29,240
We have two types of view models either Android View model or View model, and they are both from the

22
00:01:29,240 --> 00:01:31,130
life cycle package.

23
00:01:31,130 --> 00:01:37,970
Both the view model and Android View model are components provided by the Android architecture, components

24
00:01:37,970 --> 00:01:44,840
that play a role in managing and persisting UI related data across configuration changes.

25
00:01:44,840 --> 00:01:49,400
However, they serve slightly different purposes and have different life cycles.

26
00:01:49,400 --> 00:01:56,450
For example, the regular view model is a component of the Android architecture components and is part

27
00:01:56,450 --> 00:01:59,240
of the mVVM model view ViewModel pattern.

28
00:01:59,240 --> 00:02:06,410
It's a basic class for a view models, and it's not tied to the Android framework.

29
00:02:06,410 --> 00:02:07,730
This is the view model.

30
00:02:07,730 --> 00:02:09,080
It's an abstract class.

31
00:02:09,080 --> 00:02:14,990
It's designed to store and manage UI related data, and provides an abstraction layer between the UI

32
00:02:14,990 --> 00:02:19,310
components, activities, and fragments and the underlying data source.

33
00:02:19,310 --> 00:02:22,610
For example, a database, network, service or repository.

34
00:02:22,610 --> 00:02:30,140
This separation of concerns helps in maintaining a clean and testable architecture, but a view model

35
00:02:30,140 --> 00:02:37,520
is not aware of Android application or context, and should not be used to access Android specific components

36
00:02:37,520 --> 00:02:40,970
like system, services, resources or preferences.

37
00:02:40,970 --> 00:02:47,270
It makes the management of pure data and presentation logic very simple.

38
00:02:47,270 --> 00:02:55,700
While the Android View model is a subclass of a view model that is aware of the Android application

39
00:02:55,700 --> 00:02:56,450
context.

40
00:02:56,450 --> 00:03:04,430
This allows you to access Android specific components such as system services, resources, and preferences,

41
00:03:04,430 --> 00:03:11,480
making it suitable for situations where you need application wide context or access to system services.

42
00:03:11,480 --> 00:03:17,500
In this example, I'm not going to access context, so I remove Android.

43
00:03:17,510 --> 00:03:18,950
I'll use view model.

44
00:03:18,950 --> 00:03:21,620
I don't need to access the context.

45
00:03:21,620 --> 00:03:26,450
Okay, I'll start by creating a quiz repository.

46
00:03:26,450 --> 00:03:31,340
Instance repository equals to new quiz repository.

47
00:03:31,340 --> 00:03:38,360
The repository is used to interact with data source example an API in this application and fetch data.

48
00:03:38,390 --> 00:03:43,820
Then I need to create live data of type questions.

49
00:03:43,820 --> 00:03:45,350
List questions.

50
00:03:45,350 --> 00:03:46,280
Live data.

51
00:03:46,310 --> 00:03:55,070
Live data is an observable data holder class that allows you to observe changes in the underlying data.

52
00:03:55,070 --> 00:04:03,500
In this case, it's expected to hold the question list object, which suggests that it's intended to

53
00:04:03,500 --> 00:04:05,600
store a list of questions.

54
00:04:05,600 --> 00:04:13,520
Then I'll create a constructor empty constructor for the quiz view model, and inside it I'll initialize

55
00:04:13,520 --> 00:04:14,780
the questions list.

56
00:04:14,780 --> 00:04:18,709
Live data repository dot get questions from API.

57
00:04:18,740 --> 00:04:23,930
This method used to fetch questions from an API.

58
00:04:23,960 --> 00:04:30,680
It's likely returns a live data object containing a question list object.

59
00:04:30,680 --> 00:04:37,970
So if we go back you can see from the repository it's returning type is live data of question list.

60
00:04:37,970 --> 00:04:48,950
Then I need to create a method called get question list or questions list live data or I can create

61
00:04:48,950 --> 00:04:49,220
it.

62
00:04:49,220 --> 00:04:50,420
It's a getter method.

63
00:04:50,420 --> 00:04:57,770
For this live data you can click Alt Plus Insert Getter and select this or you can write it.

64
00:04:57,770 --> 00:04:59,720
This is a getter method that allows.

65
00:05:00,240 --> 00:05:01,680
External components.

66
00:05:01,710 --> 00:05:05,830
Example the UI components to access the questions list.

67
00:05:05,850 --> 00:05:08,940
Live data it returns questions list.

68
00:05:08,940 --> 00:05:12,030
Live data as a live data of type.

69
00:05:12,030 --> 00:05:13,760
Questions list object.

70
00:05:13,770 --> 00:05:17,250
Congratulations, we finished the view model.

